import logging
from aiogram import Bot, Dispatcher, executor, types,filters
from keyboards import replyMarkups as rpk
from keyboards import inlineMarkups as inl
from DataBase import db as DB
from Logic import BotLogic as BL
from Logic import InlineLogic as IL
import asyncio
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled

API_TOKEN = '*TOKEN*'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
@dp.throttled(rate=1)
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Çüëã. –Ø Habrot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö " +
                        "—Å—Ç–∞—Ç–µ–π –Ω–∞ habr.com, —Ç–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. \n\n –í–Ω–∏–∑—É –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π —Ç—ã "+
                        " –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π. \n\n –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ /help, —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å"
                        ,reply_markup=rpk.MainMenu)
    DB.add_user(message.from_user.id)

@dp.message_handler(commands=['help'])
@dp.throttled(rate=1)
async def help_message(message: types.Message):
    await message.reply("‚ú®–î–æc—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã‚ú®\n\n"
             +  "–ù–∞—á–∞—Ç—å\\–∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            + "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π\n"
            + "/stop - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π \n"
            + "/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –≤ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π\n"
            + "\n\n"
            + "–í–Ω–∏–∑—É —Ç—ã –º–æ–∂–µ—à—å –∑–∞–º–µ—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ß–µ—Ä–µ–∑ –Ω–∏—Ö –º–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π. \n\n"
            + "–ö–Ω–æ–ø–∫–∞ '–ú–æ–∏ –ü–æ–¥–ø–∏—Å–∫–∏ üì∞' - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            + "–ö–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ‚ûï' –∏ '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã ‚ûñ'- –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
            + "–¢–∞–∫ –∂–µ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–∞—Ö –±–∞–≥–∞—Ö –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –≤–æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: bbb333bbbzvv@gmail.com")

@dp.message_handler(commands=['stop'])
@dp.throttled(rate=1)
async def btnStopCommand(message: types.message):
    await Stop(message)

@dp.message_handler(filters.Text(equals="–ú–æ–∏ –ü–æ–¥–ø–∏—Å–∫–∏ üì∞"))
@dp.throttled(rate=1)
async def MySubs(message: types.Message):
    await BL.myGroups(message)

@dp.message_handler(filters.Text(equals="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ‚ûï"))
@dp.throttled(rate=1)
async def addGroup(message: types.Message):
    await BL.addGroup(message)

@dp.message_handler(filters.Text(equals="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã ‚ûñ"))
@dp.throttled(rate=1)
async def DeleteGroup(message: types.Message):
    await BL.deleteGroup(message)

@dp.message_handler(filters.Text(equals="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É üõë"))
@dp.throttled(rate=1)
async def Stop(message: types.Message):
    await BL.deactivateUser(message)

@dp.message_handler(filters.Text(equals="–ü–æ–º–æ—â—å ‚ùì"))
@dp.throttled(rate=1)
async def HelpBtn(message: types.Message):
    await help_message(message)

@dp.message_handler()
@dp.throttled(rate=1)
async def echo(message:types.Message):
    found = DB.findSmallHub(message.text)
    if len(found) == 0:
        await bot.send_message(message.from_user.id,"–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞–±–∞")
    else:
        x = 1
        kb = types.InlineKeyboardMarkup(row_width=4)
        msg = " üîé –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n"
        for i in found:
            msg += str(x) + ": " + i[1] + "\n"
            kb.insert(types.InlineKeyboardButton(text=x, callback_data=x))
            x += 1
            if x == 11:
                break
        msg += "\n–ù–∏–∂–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        await bot.send_message(message.from_user.id, msg, reply_markup=kb)

#---------------------------------- CallBack Handler --------------------------------------------
@dp.callback_query_handler(text="smallHub")
async def btnSmallHub(message: types.Message):
    await bot.edit_message_text(message.message.text, message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id,"–•–æ—Ä–æ—à–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞–±–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.\n–ê —è –µ–≥–æ –ø–æ–∏—â—É –¥–ª—è —Ç–µ–±—è")


@dp.callback_query_handler(text="No")
async def btnNo(message: types.Message):
    await bot.edit_message_text(message.message.text, message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—Ç—å—è, —è —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª—é")

@dp.callback_query_handler(text="Yes")
async def btnYes(message: types.Message):
    await bot.edit_message_text(message.message.text, message.from_user.id, message.message.message_id)
    listText = (message.message.text.split())  # –†–∞–∑–±–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –º–∞—Å—Å–∏–≤
    Text = ""
    for i in range(message.message.text.split().index("—Ö–∞–±:") + 1, message.message.text.split().index("–•–æ—Ç–∏—Ç–µ")):
            Text += listText[i] + " "
    Text = Text.rstrip()
    await BL.getLast(message, Text)



@dp.callback_query_handler(lambda call: True)
async def callback_inline(call):
    await bot.edit_message_text(call.message.text, call.from_user.id, call.message.message_id)
    await IL.requestOnUnknownInline(call)


#----------------------------------- Scheduled ------------------------------------
async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        await BL.Schedule()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled(900))
    executor.start_polling(dp, skip_updates=True)